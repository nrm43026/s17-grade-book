package com.example.matth.gradebook.data;

import com.example.matth.gradebook.database.GradeBookDB;

import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 * Contains information about the course
 * Created by Andy on 6/11/2017.
 */
public class Course {

    GradeBookDB db;

    //List of assignments
    private ArrayList<Assignment> assignments;

    //Display names
    private String name;
    private String fullName;

    //ID of Course in database
    private long CourseId;

    //Points (calculated from assignments)
    private int totalPoints;
    private int currentPoints;

    //Results from point calculations
    private double currentPercentOfGraded;
    private double currentPercentOfAll;

    /**
     * Do not use for actual code, only use for testing.
     */
    public Course() {
        //Leave this here for Unit testing
    }

    /**
     * Primary constructor
     *
     * @param courseId               - index of the course
     * @param name                   - short name of the course
     * @param fullName               - complete name of the course
     * @param totalPoints            - TODO remove, calculated field
     * @param currentPoints          - TODO remove, calculated field
     * @param currentPercentOfGraded - TODO remove, calculated field
     * @param currentPercentOfAll    - TODO remove, calculated field
     * @param assignments            - TODO remove, should be populated after construction
     */
    public Course(long courseId, String name, String fullName,
                  int totalPoints, int currentPoints, double currentPercentOfGraded,
                  double currentPercentOfAll, ArrayList<Assignment> assignments) {
        this.name = name;
        this.fullName = fullName;
        CourseId = courseId;
        this.totalPoints = totalPoints;
        this.currentPoints = currentPoints;
        this.currentPercentOfGraded = currentPercentOfGraded;
        this.currentPercentOfAll = currentPercentOfAll;
        this.assignments = assignments;

    }

    /**
     * Simple constructor for use when adding a new course manually
     * The ID won't be known, it will be autogenerated by DB when inserted (unique).
     * Everything else is calculated from looping through the assignments that will
     * be connected to the course.
     * @param name                   - short name of the course
     * @param fullName               - complete name of the course
     */
    public Course(String name, String fullName) {
        this.name = name;
        this.fullName = fullName;
        this.totalPoints = 0;
        this.currentPoints = 0;
        this.currentPercentOfGraded = 0.0;
        this.currentPercentOfAll = 0.0;
        this.assignments = new ArrayList<Assignment>();

        //this.update();  // I'm thinking we might need this here because it could be possible there
                        // is an assignment in the DB that could still point to this course.

    }

    /**
     * Constructor used when importing assignments from myFranklin.
     * The ID won't be known, it will be autogenerated by DB when inserted (unique).
     * We WILL know everything else though: Short name, Long name, total points for course, current
     * points for course (earned), and will also have a list of all assignments. The percentages
     * should still be calculated though upon import.
     * @param name                   - short name of the course. Ex: 'COMP394-Q1WW (S17)'
     * @param fullName               - complete name of the course. Ex: 'CS Practicum 2'
     * @param totalPoints            - total points possible in course
     * @param currentPoints          - total points earned so far in graded assignments
     * @param assignments            - ArrayList of assignments pulled from myFranklin grade page.
     */
    public Course(String name, String fullName,
                  int totalPoints, int currentPoints, ArrayList<Assignment> assignments) {
        this.name = name;
        this.fullName = fullName;
        this.totalPoints = totalPoints;
        this.currentPoints = currentPoints;
        this.assignments = assignments;

    }


    //================================================
    //======== Calculations ==========================
    //================================================

    /**
     * Updates/Calculates/ReCalculates all computed fields. Used after adding a course, importing a
     * course from myFranklin, or after any change (points earned, assignment deleted,
     * course updated, etc)
     */
    public void update(GradeBookDB inDB) {
        // TODO search for any assignments that are linked to this course in the DB (by course_id)
        this.db = inDB;
        assignments = db.getAssignments(getCourseId());
        calcData();
    }

    // A hack that will hurt your brain... please don't look at this abomination..
    private void update() {
        update(db);
    }

    /**
     * Calculates the grade point values
     */
    public void calcData() {
        // TODO clean this logic up. I added the null check as a hack to fix errors...
        if (assignments != null) {
            //reset our values
            totalPoints = 0; // how many points possible in course
            currentPoints = 0; // how many points earned so far (graded)
            currentPercentOfGraded = 0.0; // percent using only graded assignments
            currentPercentOfAll = 0.0; // percent using all assignments

            // need a temp variable for the total points possible of only the graded assignments
            int pointsPossibleOfGradedAssignments = 0;

            // loop through the assignments
            for (Assignment a : assignments ) {
                a.update(); // make sure we're up to date
                // add up all the points from all assignments
                totalPoints += a.getPointsPossible();
                currentPoints += a.getPointsEarned();
                if (a.isGraded()) {
                    pointsPossibleOfGradedAssignments += a.getPointsPossible();
                }
            }

            // now do the math
            currentPercentOfAll = (double)currentPoints / (double)totalPoints;
            currentPercentOfGraded = (double)currentPoints / (double)pointsPossibleOfGradedAssignments;
        }
        //TODO Should we also update/save to the database when this update method is called?
    }

    /**
     * Gets the current grade of all completed assignments
     *
     * @return grade enum value
     */
    public EnumGrades getGrade() {
        //Re-calculate grades TODO remove if refresh in a different spot on change
        update();

        //Loop grades checking for minimal value requirement
        for (EnumGrades grades : EnumGrades.values()) {
            if (currentPercentOfGraded > grades.check) {
                return grades;
            }
        }
        return EnumGrades.ERROR;
    }

    /**
     * Adds an assignment to the course and updates computed values. Likely used for manually adding
     * courses through the Android app. Not likely to be used for import through myFranklin, since
     * all the data will already be calculated.
     *
     * @param assignment the assignment to be added.
     */
    public boolean addAssignment(Assignment assignment) {
        //TODO check that the assignment is not a duplicate
        assignments.add(assignment);
        update();
        //TODO return false if error adding assignment (duplicate, etc)
        return true;
    }

    //================================================
    //======== Getters & Setters =====================
    //================================================

    //Returns the id of this course in the DB
    public long getCourseId() {
        return CourseId;
    }

    public void setCourseId(long courseId) {
        CourseId = courseId;
    }

    /**
     * Short name of the course
     * <p>
     * Ex. COMP201
     *
     * @return name of class
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * Full name of the course
     * <p>
     * Ex. Introduction to Computer Programming I
     *
     * @return name of class
     */
    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    // Gets the total points possible in this course
    public int getTotalPoints() {
        return totalPoints;
    }

    public void setTotalPoints(int totalPoints) {
        this.totalPoints = totalPoints;
    }

    public ArrayList<Assignment> getAssignments() {
        return assignments;
    }

    public void setAssignments(ArrayList<Assignment> assignments) {
        this.assignments = assignments;
        for(Assignment assignment : assignments)
        {
            assignment.setCourseId(getCourseId());
        }
    }

    // Gets the the current percentage in this Course calculated with graded assignments only
    public double getCurrentPercentOfGraded() {
        return currentPercentOfGraded;
    }

    // If you need the nicely formatted percentage use this method.
    public String getCurrentPercentOfGradedString() {
        double p = currentPercentOfGraded * 100;
        String df = new DecimalFormat("#.##").format(p);
        return df + "%";
    }

    public void setCurrentPercentOfGraded(double currentPercentOfGraded) {
        this.currentPercentOfGraded = currentPercentOfGraded;
    }


    // Gets the current percentage in this course calculated with all listed assignments
    // (including those not yet graded, which might have scores of 0...)
    public double getCurrentPercentOfAll() {
        return currentPercentOfAll;
    }

    // If you need the nicely formatted percentage use this method.
    public String getCurrentPercentAllString() {
        double p = currentPercentOfAll * 100;
        String df = new DecimalFormat("#.##").format(p);
        return df + "%";
    }

    public void setCurrentPercentOfAll(double currentPercentOfAll) {
        this.currentPercentOfAll = currentPercentOfAll;
    }

    public int getCurrentPoints() {
        return currentPoints;
    }

    public void setCurrentPoints(int currentPoints) {
        this.currentPoints = currentPoints;
    }

    @Override
    public String toString() {
        return "Course[" + getCourseId() + ", " + getName() + "]@" + hashCode();
    }
}
